import{_ as s,p as t,q as o,J as a,s as n}from"./framework-4a7f5a2b.js";const l={},i=a('<h1 id="vue-router" tabindex="-1"><a class="header-anchor" href="#vue-router" aria-hidden="true">#</a> vue-router</h1><h2 id="router-发展历史" tabindex="-1"><a class="header-anchor" href="#router-发展历史" aria-hidden="true">#</a> Router 发展历史</h2><p>路由的概念，是伴随 SPA 出现的。在此之前，页面的跳转是通过服务器端进⾏控制的；</p><ul><li>传统的页面的跳转，是通过前端向后台发送请求</li><li>后台通过模板引擎的渲染，将⼀个新的 html 界面</li><li>⽐如页面跳转时： <ul><li>from 表单的提交；</li><li>a 标签的默认属性；</li><li>js 调⽤ location.href，给其赋值；</li><li>H5: history 的 go / forward / back -- // history.push / replace ?</li></ul></li><li>在 SPA（即只有⼀个 html ） 的出现后，前端可以⾃由控制组件的渲染，来模拟页面的跳转。 <ul><li>页面是怎么发⽣跳转，向服务端请求的呢？-- 浏览器劫持</li><li>SPA的⽅法，需要拦截请求； <ul><li>hash 路由，当我的hash</li><li>history 的 go / forward / back 的时候，我的浏览器的地址，是发⽣了改变的，</li></ul></li></ul></li></ul>',4),e=n("div",{class:"custom-container tip"},[n("svg",{xmlns:"http://www.w3.org/2000/svg","xmlns:xlink":"http://www.w3.org/1999/xlink",viewBox:"0 0 24 24"},[n("g",{fill:"none",stroke:"currentColor","stroke-width":"2","stroke-linecap":"round","stroke-linejoin":"round"},[n("circle",{cx:"12",cy:"12",r:"9"}),n("path",{d:"M12 8h.01"}),n("path",{d:"M11 12h1v4h1"})])]),n("p",{class:"custom-container-title"},"总结"),n("p",null,"后端路由是根据 url 访问相关的 controller 进⾏数据资源和模板引擎的拼接，返回前端；"),n("p",null,"前端路由是通过 js 根据 url 返回对应的组件加载。 所以，前端的路由包含两个部分："),n("ul",null,[n("li",null,"url 的处理"),n("li",null,"组件加载")])],-1),p=a(`<h3 id="路由的分类" tabindex="-1"><a class="header-anchor" href="#路由的分类" aria-hidden="true">#</a> 路由的分类</h3><ul><li>history 路由</li><li>hash 路由</li><li>memory 路由 *</li></ul><h3 id="hash-路由" tabindex="-1"><a class="header-anchor" href="#hash-路由" aria-hidden="true">#</a> hash 路由</h3><p>window.location.hash = &quot;xxx&quot;</p><p>hash 的出现,他有以下⼏种特性：</p><ol><li>url 中的 hash 值只是客⼾端/浏览器端的⼀种状态，向服务器发送请求的时候，hash 部分的值不 会携带。</li><li>hash 值的更改，并不会导致页面的刷新</li><li>hash 值的更改，会在浏览器的访问历史中增加记录，所以我们可以通过浏览器的回退、前进按钮 控制 hash 的切换</li><li>hash 值的更改，会触发 hashchange 事件</li></ol><p>⽐如https://www.baidu.com/#/hash1, 改变#后面的内容并不会导致页面刷新，⽽且会触发 hashchange 事件。</p><p>我们同样有两种⽅式来控制 hash 的变化：</p><ol><li>通过 a 标签，设置 href 属性，当⽤⼾点击 a 标签的时候，Url 中的 hash 就会改变为 href 属性 值。</li><li>通过 js location.hash = &#39;#hash-change&#39;</li></ol><h3 id="history-路由" tabindex="-1"><a class="header-anchor" href="#history-路由" aria-hidden="true">#</a> history 路由</h3><p>hash 虽然能解决问题，但是带有#很不美观。</p><p>历史的⻋轮⽆情撵过 hash，到了 html5 时代，推出了 history api。</p><p>history./(go|back|repalce|push|forward)/</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后退 </span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前进 </span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">go</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 后退三个页面 </span>
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">pushState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span> 
window<span class="token punctuation">.</span>history<span class="token punctuation">.</span><span class="token function">replaceState</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),c=[i,e,p];function u(h,r){return t(),o("div",null,c)}const k=s(l,[["render",u],["__file","index.html.vue"]]);export{k as default};
