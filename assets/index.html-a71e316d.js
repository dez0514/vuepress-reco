import{_ as o,p as t,q as c,s as n,G as e,t as l,J as p,n as i}from"./framework-4a7f5a2b.js";const d="/vuepress-reco/engineer/testmodule.png",r="/vuepress-reco/engineer/err.png",s="/vuepress-reco/engineer/link.png",u="/vuepress-reco/engineer/dev.png",m="/vuepress-reco/engineer/mklink.png",k={},h=p('<h1 id="npm-link-软链接" tabindex="-1"><a class="header-anchor" href="#npm-link-软链接" aria-hidden="true">#</a> npm-link 软链接</h1><h2 id="作用" tabindex="-1"><a class="header-anchor" href="#作用" aria-hidden="true">#</a> 作用</h2><p><code>npm link</code> 可以用来调试测试本地开发的依赖包。</p><p>npm 提供的标准做法是，我们完成依赖包（或组件）的开发后，登录<code>npm login</code>， 发布<code>npm publish</code>，成功后去npm查看是否发布成功，然后在项目里 <code>npm install xxx</code> 来完成引用。</p><p>但是 如果依赖包有修改，需要改包的版本重走一遍上述过程，并且项目里需要重新<code>npm install xxx</code>，相对来说会造成bug修复版本过多，对引用到包的项目也需要重新install，比较麻烦。</p><p>使用 <code>npm link</code> 就可以在本地完成链接和引用。并且更新时，所有引用会同步更新，不需要重新引用。</p><h2 id="示例用法" tabindex="-1"><a class="header-anchor" href="#示例用法" aria-hidden="true">#</a> 示例用法</h2><ol><li><p>创建两个项目，一个依赖包，一个引用该依赖的项目。暂时放一块(根目录：npmlink-test)便于终端shell切换目录，也可以放不同目录。 <img src="'+d+`" alt=""></p></li><li><p>创建一个依赖包项目根目录，例如：testModule，使用 <code>npm init</code> 初始化配置生产 <code>package.json</code> 文件。在目录下创建 <code>index.js</code> 文件，例如：</p></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;testModule&quot;</span><span class="token punctuation">,</span>
  <span class="token function-variable function">sayHello</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;hello testModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>创建项目，就用简单node.js项目举例， 例如：myProject， main.js。</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> myModule <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;testModule&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
myModule<span class="token punctuation">.</span><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时在终端进入myProject目录，使用 <code>node main.js</code> 运行项目， 肯定会报错，找不到模块。 <img src="`+r+'" alt=""></p><ol start="4"><li>使用 <code>npm link</code> 链接到模块。 首先进入依赖包根目录（testModule）， 终端shell运行 <code>npm link</code>， 会看到<code>testModule</code>中新增了<code>package-lock.json</code>文件， 并且 <code>nodejs</code> 环境 <code>node_modules</code> 目录中添加了<code>testModule的快捷方式</code>，由于是快捷方式，所以修改<code>testModule</code>时也不需要再重复的link。</li></ol><p><img src="'+s+'" alt=""></p><p>此时<code>testModule</code>包已经可以被项目引用了，所以进入 myProject 目录，将依赖包与项目链接起来。执行 <code>npm link testModule</code></p><p><img src="'+s+'" alt=""></p><p>会看到 <code>myProject</code> 中出现了 <code>node_modules</code> 并且里面有了<code>testModule的快捷方式</code></p><p>此时再运行 myProject 就能正常运行。</p><p><img src="'+u+`" alt=""></p><h2 id="解绑-npm-unlink" tabindex="-1"><a class="header-anchor" href="#解绑-npm-unlink" aria-hidden="true">#</a> 解绑 npm unlink</h2><p>不想使用时，可以使用 <code>npm unlink</code> 来解绑。项目解绑，进入myProject目录执行 <code>npm unlink testModule</code>，会删掉<code>node_modules</code>中的<code>testModule快捷方式</code>。解绑依赖包，进入testModule目录执行<code>npm unlink</code>，会删掉nodejs环境的<code>node_modules</code>中的<code>testModule快捷方式</code>。</p><h2 id="npm-link-使用全局安装的模块" tabindex="-1"><a class="header-anchor" href="#npm-link-使用全局安装的模块" aria-hidden="true">#</a> npm link 使用全局安装的模块</h2><p>上面的例子中<code>npm link</code>用来使用自己开发模块。使用npm的模块，也可以使用npm link命令。</p><p>比如多个项目都用到 test-script 模块： 第一步，将test-script安装到全局模式下。 npm install test-script -g</p><p>第二步，在<code>每一个</code>要开发的应用中，连接全局安装的test-script。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> project1:
<span class="token function">npm</span> <span class="token function">link</span> test-script
<span class="token builtin class-name">cd</span> project2:
<span class="token function">npm</span> <span class="token function">link</span> test-script
<span class="token punctuation">..</span>.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>npm update test-script -g</code> 更新全局模式的test-script，所有link过去的项目同时更新了。</p><p>注意：<code>npm install -g</code> 只是安装到全局目录了，只是命令行可以使用，每个项目还是需要将包引用到node_modules才能require使用，所以还是需要每个项目都 <code>npm link</code></p><h2 id="windows-创建软链接-mklink-d-link-target" tabindex="-1"><a class="header-anchor" href="#windows-创建软链接-mklink-d-link-target" aria-hidden="true">#</a> windows 创建软链接： mklink [/d] Link Target</h2>`,29),_={href:"https://www.python100.com/html/RNK6V2X9H578.html",target:"_blank",rel:"noopener noreferrer"},v=n("code",null,"/d",-1),g=n("code",null,"Link",-1),b=n("code",null,"Target",-1),f=n("code",null,"D:works_space/packages",-1),x=n("code",null,"system",-1),j=n("code",null,"works",-1),y=n("code",null,"node_modules",-1),M=n("ol",null,[n("li",null,[e("cmd 进入需要使用的地方 "),n("code",null,"node_modules"),e("。")]),n("li",null,[e("执行 "),n("code",null,"mklink /d system D:works_space\\packages\\system")])],-1),w=n("p",null,[n("img",{src:m,alt:""})],-1);function q(P,N){const a=i("ExternalLinkIcon");return t(),c("div",null,[h,n("p",null,[n("a",_,[e("参考"),l(a)]),e(" tip: "),v,e(" 表示软链目录，默认为文件。"),g,e(" 指定新的符号链接名称（会在使用的地方创建）。"),b,e(" 指定新链接引用的路径。 例如：在 "),f,e(" 里封装了一个组件叫 "),x,e(" 在 "),j,e(" 的项目的 "),y,e(" 中使用。")]),M,w])}const L=o(k,[["render",q],["__file","index.html.vue"]]);export{L as default};
